
# use a recent version
CMAKE_MINIMUM_REQUIRED(VERSION 2.8) 

PROJECT(PyPlasm)


SET(CMAKE_BUILD_TYPE "Release")

# some basic tests 
INCLUDE(CMakeBackwardCompatibilityCXX)
INCLUDE(CheckCSourceCompiles)

# add the possibility to add groups to solution
SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS On)

# parallel building
SET (CMAKE_NUM_PROCS 8)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR})

# problems checking python version number in Anaconda
SET(PYTHON_REQUIRED_VERSION)

####################################################
# platform
####################################################
IF(TRAVIS)
  SET(PYPLASM_TRAVIS 1)
  ADD_DEFINITIONS(-DPYPLASM_TRAVIS=1)
ENDIF()

IF (WIN32)

  SET(PYPLASM_WINDOWS 1)
  ADD_DEFINITIONS(-DPYPLASM_WINDOWS=1 -D_SCL_SECURE_NO_WARNINGS -D_CRT_SECURE_NO_WARNINGS -DWIN32_LEAN_AND_MEAN=1)
  MESSAGE("-- Setting PYPLASM_WINDOWS")
  
ELSEIF (APPLE)

  SET(PYPLASM_APPLE 1)
  ADD_DEFINITIONS(-DPYPLASM_APPLE=1)
  
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wformat-nonliteral -Wformat-security -Wno-write-strings -Wno-reorder -Wno-unused-variable")
  set(CMAKE_MACOSX_RPATH ON)
  MESSAGE("-- Setting PYPLASM_APPLE")
  
ELSE()

  MESSAGE("-- Setting PYPLASM_LINUX")
  SET(PYPLASM_LINUX 1)
  ADD_DEFINITIONS(-DPYPLASM_LINUX=1)
  
  if(NOT CMAKE_BUILD_TYPE)
    MESSAGE(STATUS "Setting build type to 'Release' as none was specified.")
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build." FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release")
  endif()
  
   IF (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    ADD_DEFINITIONS(-D_DEBUG=1)
  ENDIF() 
  
   # enable 64 bit file support (see http://learn-from-the-guru.blogspot.it/2008/02/large-file-support-in-linux-for-cc.html)
  ADD_DEFINITIONS(-D_FILE_OFFSET_BITS=64)
  SET(CMAKE_C_FLAGS    ${CMAKE_C_FLAGS}   "-fPIC")
  SET(CMAKE_CXX_FLAGS  ${CMAKE_CXX_FLAGS} "-fPIC -std=gnu++0x")


  set (python_cmd "python")
  set (python_arg "npi.py")
  message(STATUS "cmd: ${python_cmd}")
  execute_process(COMMAND ${git_cmd} ${python_arg}
  WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
  RESULT_VARIABLE python_result
  OUTPUT_VARIABLE np_include_dir)

  message(STATUS "git ver[${python_result}]: ${np_include_dir}")



  FIND_PACKAGE(NumPy)
  INCLUDE_DIRECTORIES("/usr/local/include")
  INCLUDE_DIRECTORIES("/usr/include")
  INCLUDE_DIRECTORIES(${NUMPY_INCLUDE_DIRS})
  INCLUDE_DIRECTORIES(${np_include_dir})


ENDIF()

ADD_DEFINITIONS(-DPYPLASM_JUCE=1)
ADD_SUBDIRECTORY(libs)
ADD_SUBDIRECTORY(src)





